inner_join(tPrice) %>% select(medianPrice)
noQuant <- which(is.na(sales$Quant))
noVal <- which(is.na(sales$Val))
sales[noQuant,'Quant'] <- ceiling(sales[noQuant,'Val']/noQuantMedPrices)
sales[noVal,'Val'] <- sales[noVal,'Quant'] * noValMedPrices
sales$Uprice <- sales$Val/sales$Quant
noQuantMedPrices <- filter(sales, is.na(Quant)) %>%
inner_join(tPrice) %>% select(medianPrice)
noValMedPrices <- filter(sales, is.na(Val)) %>%
inner_join(tPrice) %>% select(medianPrice)
library(dplyr)
data(sales,package="DMwR2") # load the data without loading the pack.
sales
library(dplyr)
data(sales,package="DMwR2") # load the data without loading the pack.
sales
View(sales)
summary(sales)
str(sales)
library(dplyr)
data(sales,package="DMwR2") # load the data without loading the pack.
sales
sales <- mutate(sales, Uprice = Val / Quant)
summary(sales$Uprice)
sales <- mutate(sales, Uprice = Val / Quant)
summary(sales$Uprice)
nrow(summarise(prods,nTrans=n())
summarise(prods,nTrans=n()
nrow(summarise(prods,nTrans=n()) %>% filter(nTrans < 20))
prods
save(sales,file="mySalesObj.Rdata")
save(sales,file="mySalesObj.Rdata")
save(sales,file="mySalesObj.Rdata")
nouts <- function(x) length(boxplot.stats(x)$out)
summarize(noutsProds,totalOuts=sum(nouts()))/nrow(sales)*100
summarize(noutsProds,totalOuts=sum(nOut))
nouts <- function(x) length(boxplot.stats(x)$out)
noutsProds <- summarise(prods,nOut=nouts(Uprice))
arrange(noutsProds,desc(nOut))
summarize(noutsProds,totalOuts=sum(nOut))
summarize(noutsProds,totalOuts=sum(nouts()))/nrow(sales)*100
summarize(noutsProds,totalOuts=sum(nouts()))/nrow(sales)*100
summarize(noutsProds,totalOuts=sum(nouts()))/nrow(sales)*100
sum(nouts()))/nrow(sales)*100
sum(nouts())/nrow(sales)*100
nrow(sales)*100
nouts
summarize(noutsProds,totalOuts=sum(nouts())/nrow(sales)*100
summarize(noutsProds,totalOuts=sum(nouts())/nrow(sales)*100
summarize(noutsProds,totalOuts=sum(nOut))/nrow(sales)*100
noQuantMedPrices <- filter(sales, is.na(Quant)) %>%
inner_join(tPrice) %>% select(medianPrice)
noValMedPrices <- filter(sales, is.na(Val)) %>%
inner_join(tPrice) %>% select(medianPrice)
nas <- filter(sales,is.na(Quant), is.na(Val)) %>% select(ID,Prod)
nas <- filter(sales,is.na(Quant), is.na(Val)) %>% select(ID,Prod)
prop.naQandV <- function(q,v)
100*sum(is.na(q) & is.na(v))/length(q)
summarise(ids,nProbs=prop.naQandV(Quant,Val)) %>%
arrange(desc(nProbs))
summarise(prods,nProbs=prop.naQandV(Quant,Val)) %>%
arrange(desc(nProbs))
sales <- filter(sales,!(is.na(Quant) & is.na(Val)))
prop.nas <- function(x) 100*sum(is.na(x))/length(x)
propNAsQp <- summarise(prods,Proportion=prop.nas(Quant))
arrange(propNAsQp,desc(Proportion))
nlevels(sales$Prod)
sales <- droplevels(filter(sales,!(Prod %in% c("p2442", "p2443"))))
nlevels(sales$Prod)
summarise(ids,Proportion=prop.nas(Quant)) %>%
arrange(desc(Proportion))
summarise(prods,Proportion=prop.nas(Val)) %>%
arrange(desc(Proportion))
summarise(ids,Proportion=prop.nas(Val)) %>%
arrange(desc(Proportion))
tPrice <- filter(sales, Insp != "fraud") %>%
group_by(Prod) %>%
summarise(medianPrice = median(Uprice,na.rm=TRUE))
noQuantMedPrices <- filter(sales, is.na(Quant)) %>%
inner_join(tPrice) %>% select(medianPrice)
noValMedPrices <- filter(sales, is.na(Val)) %>%
inner_join(tPrice) %>% select(medianPrice)
noQuantMedPrices <- filter(sales, is.na(Quant)) %>% inner_join(tPrice) %>% select(medianPrice)
select(medianPrice)
is.na(Quant)
View(noutsProds)
is.na(sales$Quant)
filter(sales, is.na(sales$Quant))
inner_join(tPrice)
filter(sales, is.na(sales$Quant)) %>% inner_join(tPrice)
View(prods)
noQuantMedPrices <- filter(sales, is.na(sales$Quant)) %>% inner_join(tPrice) %>% select(medianPrice)
noValMedPrices <- filter(sales, is.na(Val)) %>%
inner_join(tPrice) %>% select(medianPrice)
noQuant <- which(is.na(sales$Quant))
noVal <- which(is.na(sales$Val))
sales[noQuant,'Quant'] <- ceiling(sales[noQuant,'Val']/noQuantMedPrices)
sales[noVal,'Val'] <- sales[noVal,'Quant'] * noValMedPrices
sales$Uprice <- sales$Val/sales$Quant
setwd("/Users/shamekabrayton/Dropbox/NYU/02_Module/08_DMR/_InClass")
library(dplyr)
data(sales,package="DMwR2") # load the data without loading the pack.
sales
summary(sales)
nrow(filter(sales,is.na(Quant), is.na(Val)))
table(sales$Insp)/nrow(sales)*100
sales <- mutate(sales, Uprice = Val / Quant)
summary(sales$Uprice)
library(ggplot2);
ids <- group_by(sales, ID)
ggplot(summarize(ids, nTrans=n()),aes(x=ID,y=nTrans)) + geom_bar(stat="identity") +
theme(axis.text.x = element_blank(),axis.ticks.x=element_blank()) +
xlab("Salesmen") + ylab("Nr. of Transactions") +
ggtitle("Nr. of Transactions per Salesman")
prods <- group_by(sales, Prod)
ggplot(summarize(prods, nTrans=n()),aes(x=Prod,y=nTrans)) + geom_bar(stat="identity") +
theme(axis.text.x = element_blank(),axis.ticks.x=element_blank()) +
xlab("Product") + ylab("Nr. of Transactions") +ggtitle("Nr. of Transactions per Product")
nrow(summarise(prods,nTrans=n()) %>% filter(nTrans < 20))
mpProds <- summarize(prods, medianPrice=median(Uprice,na.rm=TRUE))
bind_cols(mpProds %>% arrange(medianPrice) %>% slice(1:5),
mpProds %>% arrange(desc(medianPrice)) %>% slice(1:5))
library(ggplot2)
library(forcats)
ggplot(filter(sales,
Prod %in% c("p3689","p560")),
aes(x=fct_drop(Prod), y=Uprice)) +
geom_boxplot() +
scale_y_log10() +
xlab("") + ylab("log10(UnitPrice)")
nrow(summarise(ids,nTrans=n()) %>% filter(nTrans < 10))
tvIDs <- summarize(ids,totalVal=sum(Val,na.rm=TRUE))
bind_cols(tvIDs %>% arrange(totalVal) %>% slice(1:5),
tvIDs %>% arrange(desc(totalVal)) %>% slice(1:5))
arrange(tvIDs,desc(totalVal)) %>% slice(1:100) %>%
summarize(t100=sum(totalVal)) /
(summarize(tvIDs,sum(totalVal))) * 100
arrange(tvIDs,totalVal) %>% slice(1:2000) %>%
summarize(b2000=sum(totalVal)) /
(summarize(tvIDs,sum(totalVal))) * 100
nouts <- function(x) length(boxplot.stats(x)$out)
noutsProds <- summarise(prods,nOut=nouts(Uprice))
arrange(noutsProds,desc(nOut))
summarize(noutsProds,totalOuts=sum(nOut))
summarize(noutsProds,totalOuts=sum(nOut))/nrow(sales)*100
nas <- filter(sales,is.na(Quant), is.na(Val)) %>% select(ID,Prod)
prop.naQandV <- function(q,v)
100*sum(is.na(q) & is.na(v))/length(q)
summarise(ids,nProbs=prop.naQandV(Quant,Val)) %>%
arrange(desc(nProbs))
summarise(prods,nProbs=prop.naQandV(Quant,Val)) %>%
arrange(desc(nProbs))
sales <- filter(sales,!(is.na(Quant) & is.na(Val)))
prop.nas <- function(x) 100*sum(is.na(x))/length(x)
propNAsQp <- summarise(prods,Proportion=prop.nas(Quant))
arrange(propNAsQp,desc(Proportion))
nlevels(sales$Prod)
sales <- droplevels(filter(sales,!(Prod %in% c("p2442", "p2443"))))
nlevels(sales$Prod)
summarise(ids,Proportion=prop.nas(Quant)) %>%
arrange(desc(Proportion))
summarise(prods,Proportion=prop.nas(Val)) %>%
arrange(desc(Proportion))
summarise(ids,Proportion=prop.nas(Val)) %>%
arrange(desc(Proportion))
tPrice <- filter(sales, Insp != "fraud") %>%
group_by(Prod) %>%
summarise(medianPrice = median(Uprice,na.rm=TRUE))
noQuantMedPrices <- filter(sales, is.na(sales$Quant)) %>% inner_join(tPrice) %>% select(medianPrice)
noValMedPrices <- filter(sales, is.na(Val)) %>%
inner_join(tPrice) %>% select(medianPrice)
noQuant <- which(is.na(sales$Quant))
noVal <- which(is.na(sales$Val))
sales[noQuant,'Quant'] <- ceiling(sales[noQuant,'Val']/noQuantMedPrices)
sales[noVal,'Val'] <- sales[noVal,'Quant'] * noValMedPrices
sales$Uprice <- sales$Val/sales$Quant
#this will take the changes to the data that I made as a new file. and it would overwrite the professors file.
#for this it would probably be better if I renamed the data file mysales. inorder to keep the integrity of the original file. in the next step, I can then compare the two data files and see the changes that occured from the original to the new one.
save(sales,file="mySalesObj.Rdata")
#this will keep take the two objects, or data files and compares them to confirm that they are the same.
identical(mysales, sales)
avgNDTP <- function(toInsp,train,stats) { if (missing(train) && missing(stats))
stop('Provide either the training data or the product stats') if (missing(stats)) {
setwd("/Users/shamekabrayton/Dropbox/NYU/02_Module/08_DMR/_InClass")
library(dplyr)
data(sales,package="DMwR2") # load the data without loading the pack.
sales
summary(sales)
nrow(filter(sales,is.na(Quant), is.na(Val)))
table(sales$Insp)/nrow(sales)*100
sales <- mutate(sales, Uprice = Val / Quant)
summary(sales$Uprice)
library(ggplot2);
ids <- group_by(sales, ID)
ggplot(summarize(ids, nTrans=n()),aes(x=ID,y=nTrans)) + geom_bar(stat="identity") +
theme(axis.text.x = element_blank(),axis.ticks.x=element_blank()) +
xlab("Salesmen") + ylab("Nr. of Transactions") +
ggtitle("Nr. of Transactions per Salesman")
prods <- group_by(sales, Prod)
ggplot(summarize(prods, nTrans=n()),aes(x=Prod,y=nTrans)) + geom_bar(stat="identity") +
theme(axis.text.x = element_blank(),axis.ticks.x=element_blank()) +
xlab("Product") + ylab("Nr. of Transactions") +ggtitle("Nr. of Transactions per Product")
nrow(summarise(prods,nTrans=n()) %>% filter(nTrans < 20))
mpProds <- summarize(prods, medianPrice=median(Uprice,na.rm=TRUE))
bind_cols(mpProds %>% arrange(medianPrice) %>% slice(1:5),
mpProds %>% arrange(desc(medianPrice)) %>% slice(1:5))
library(ggplot2)
library(forcats)
ggplot(filter(sales,
Prod %in% c("p3689","p560")),
aes(x=fct_drop(Prod), y=Uprice)) +
geom_boxplot() +
scale_y_log10() +
xlab("") + ylab("log10(UnitPrice)")
nrow(summarise(ids,nTrans=n()) %>% filter(nTrans < 10))
tvIDs <- summarize(ids,totalVal=sum(Val,na.rm=TRUE))
bind_cols(tvIDs %>% arrange(totalVal) %>% slice(1:5),
tvIDs %>% arrange(desc(totalVal)) %>% slice(1:5))
arrange(tvIDs,desc(totalVal)) %>% slice(1:100) %>%
summarize(t100=sum(totalVal)) /
(summarize(tvIDs,sum(totalVal))) * 100
arrange(tvIDs,totalVal) %>% slice(1:2000) %>%
summarize(b2000=sum(totalVal)) /
(summarize(tvIDs,sum(totalVal))) * 100
nouts <- function(x) length(boxplot.stats(x)$out)
noutsProds <- summarise(prods,nOut=nouts(Uprice))
arrange(noutsProds,desc(nOut))
summarize(noutsProds,totalOuts=sum(nOut))
summarize(noutsProds,totalOuts=sum(nOut))/nrow(sales)*100
nas <- filter(sales,is.na(Quant), is.na(Val)) %>% select(ID,Prod)
prop.naQandV <- function(q,v)
100*sum(is.na(q) & is.na(v))/length(q)
summarise(ids,nProbs=prop.naQandV(Quant,Val)) %>%
arrange(desc(nProbs))
summarise(prods,nProbs=prop.naQandV(Quant,Val)) %>%
arrange(desc(nProbs))
sales <- filter(sales,!(is.na(Quant) & is.na(Val)))
prop.nas <- function(x) 100*sum(is.na(x))/length(x)
propNAsQp <- summarise(prods,Proportion=prop.nas(Quant))
arrange(propNAsQp,desc(Proportion))
nlevels(sales$Prod)
sales <- droplevels(filter(sales,!(Prod %in% c("p2442", "p2443"))))
nlevels(sales$Prod)
summarise(ids,Proportion=prop.nas(Quant)) %>%
arrange(desc(Proportion))
summarise(prods,Proportion=prop.nas(Val)) %>%
arrange(desc(Proportion))
summarise(ids,Proportion=prop.nas(Val)) %>%
arrange(desc(Proportion))
tPrice <- filter(sales, Insp != "fraud") %>%
group_by(Prod) %>%
summarise(medianPrice = median(Uprice,na.rm=TRUE))
noQuantMedPrices <- filter(sales, is.na(sales$Quant)) %>% inner_join(tPrice) %>% select(medianPrice)
noValMedPrices <- filter(sales, is.na(Val)) %>%
inner_join(tPrice) %>% select(medianPrice)
noQuant <- which(is.na(sales$Quant))
noVal <- which(is.na(sales$Val))
sales[noQuant,'Quant'] <- ceiling(sales[noQuant,'Val']/noQuantMedPrices)
sales[noVal,'Val'] <- sales[noVal,'Quant'] * noValMedPrices
sales$Uprice <- sales$Val/sales$Quant
#this will take the changes to the data that I made as a new file. and it would overwrite the professors file.
#for this it would probably be better if I renamed the data file mysales. inorder to keep the integrity of the original file. in the next step, I can then compare the two data files and see the changes that occured from the original to the new one.
save(sales,file="mySalesObj.Rdata")
#this will keep take the two objects, or data files and compares them to confirm that they are the same.
# identical(mysales, sales)
avgNDTP <- function(toInsp,train,stats) { if (missing(train) && missing(stats))
stop('Provide either the training data or the product stats') if (missing(stats)) {
summary(sales)
summary(sales)
source("evaluationcode.R")
source("workflowsCode.R")
source("evaluationcode.R")
source("evaluationcode.R")
source("workflowsCode.R")
source("evaluationcode.R")
View(LOF.wf)
setwd("/Users/shamekabrayton/Dropbox/NYU/02_Module/08_DMR/_InClass")
library(dplyr)
data(sales,package="DMwR2") # load the data without loading the pack.
sales
summary(sales)
nrow(filter(sales,is.na(Quant), is.na(Val)))
table(sales$Insp)/nrow(sales)*100
sales <- mutate(sales, Uprice = Val / Quant)
summary(sales$Uprice)
library(ggplot2);
ids <- group_by(sales, ID)
ggplot(summarize(ids, nTrans=n()),aes(x=ID,y=nTrans)) + geom_bar(stat="identity") +
theme(axis.text.x = element_blank(),axis.ticks.x=element_blank()) +
xlab("Salesmen") + ylab("Nr. of Transactions") +
ggtitle("Nr. of Transactions per Salesman")
prods <- group_by(sales, Prod)
ggplot(summarize(prods, nTrans=n()),aes(x=Prod,y=nTrans)) + geom_bar(stat="identity") +
theme(axis.text.x = element_blank(),axis.ticks.x=element_blank()) +
xlab("Product") + ylab("Nr. of Transactions") +ggtitle("Nr. of Transactions per Product")
nrow(summarise(prods,nTrans=n()) %>% filter(nTrans < 20))
mpProds <- summarize(prods, medianPrice=median(Uprice,na.rm=TRUE))
bind_cols(mpProds %>% arrange(medianPrice) %>% slice(1:5),
mpProds %>% arrange(desc(medianPrice)) %>% slice(1:5))
library(ggplot2)
library(forcats)
ggplot(filter(sales,
Prod %in% c("p3689","p560")),
aes(x=fct_drop(Prod), y=Uprice)) +
geom_boxplot() +
scale_y_log10() +
xlab("") + ylab("log10(UnitPrice)")
nrow(summarise(ids,nTrans=n()) %>% filter(nTrans < 10))
tvIDs <- summarize(ids,totalVal=sum(Val,na.rm=TRUE))
bind_cols(tvIDs %>% arrange(totalVal) %>% slice(1:5),
tvIDs %>% arrange(desc(totalVal)) %>% slice(1:5))
arrange(tvIDs,desc(totalVal)) %>% slice(1:100) %>%
summarize(t100=sum(totalVal)) /
(summarize(tvIDs,sum(totalVal))) * 100
arrange(tvIDs,totalVal) %>% slice(1:2000) %>%
summarize(b2000=sum(totalVal)) /
(summarize(tvIDs,sum(totalVal))) * 100
nouts <- function(x) length(boxplot.stats(x)$out)
noutsProds <- summarise(prods,nOut=nouts(Uprice))
arrange(noutsProds,desc(nOut))
summarize(noutsProds,totalOuts=sum(nOut))
summarize(noutsProds,totalOuts=sum(nOut))/nrow(sales)*100
nas <- filter(sales,is.na(Quant), is.na(Val)) %>% select(ID,Prod)
prop.naQandV <- function(q,v)
100*sum(is.na(q) & is.na(v))/length(q)
summarise(ids,nProbs=prop.naQandV(Quant,Val)) %>%
arrange(desc(nProbs))
summarise(prods,nProbs=prop.naQandV(Quant,Val)) %>%
arrange(desc(nProbs))
sales <- filter(sales,!(is.na(Quant) & is.na(Val)))
prop.nas <- function(x) 100*sum(is.na(x))/length(x)
propNAsQp <- summarise(prods,Proportion=prop.nas(Quant))
arrange(propNAsQp,desc(Proportion))
nlevels(sales$Prod)
sales <- droplevels(filter(sales,!(Prod %in% c("p2442", "p2443"))))
nlevels(sales$Prod)
summarise(ids,Proportion=prop.nas(Quant)) %>%
arrange(desc(Proportion))
summarise(prods,Proportion=prop.nas(Val)) %>%
arrange(desc(Proportion))
summarise(ids,Proportion=prop.nas(Val)) %>%
arrange(desc(Proportion))
tPrice <- filter(sales, Insp != "fraud") %>%
group_by(Prod) %>%
summarise(medianPrice = median(Uprice,na.rm=TRUE))
noQuantMedPrices <- filter(sales, is.na(sales$Quant)) %>% inner_join(tPrice) %>% select(medianPrice)
noValMedPrices <- filter(sales, is.na(Val)) %>%
inner_join(tPrice) %>% select(medianPrice)
noQuant <- which(is.na(sales$Quant))
noVal <- which(is.na(sales$Val))
sales[noQuant,'Quant'] <- ceiling(sales[noQuant,'Val']/noQuantMedPrices)
sales[noVal,'Val'] <- sales[noVal,'Quant'] * noValMedPrices
sales$Uprice <- sales$Val/sales$Quant
#this will take the changes to the data that I made as a new file. and it would overwrite the professors file.
#for this it would probably be better if I renamed the data file mysales. inorder to keep the integrity of the original file. in the next step, I can then compare the two data files and see the changes that occured from the original to the new one.
save(sales,file="mySalesObj.Rdata")
#this will keep take the two objects, or data files and compares them to confirm that they are the same.
# identical(mysales, sales)
avgNDTP <- function(toInsp,train,stats) { if (missing(train) && missing(stats))
stop('Provide either the training data or the product stats') if (missing(stats)) {
summary(sales)
source("evaluationcode.R")
source("workflowsCode.R")
summary(sales)
100*sum(sales$Insp == "unkn")/nrow(sales)
avgNDTP <- function(toInsp,train,stats) { if (missing(train) && missing(stats))
stop('Provide either the training data or the product stats') if (missing(stats)) {
View(mpProds)
View(BPrule.wf)
myBPrule.wf <- function(form,train,test,...) {
require(dplyr, quietly=TRUE)
ms <- as.matrix(filter(train,Insp != 'fraud') %>%
group_by(Prod) %>%
summarise(median=mean(Uprice),iqr=sd(Uprice)) %>%
select(median,iqr))
rownames(ms) <- levels(train$Prod)
ms[which(ms[,'iqr']==0),'iqr'] <- ms[which(ms[,'iqr']==0),'median']
ORscore <- abs(test$Uprice-ms[test$Prod,'median']) /
ms[test$Prod,'iqr']
rankOrder <- order(ORscore,decreasing=T)
res <- list(testSet=test,rankOrder=rankOrder,
probs=matrix(c(ORscore,ifelse(test$Insp=='fraud',1,0)),ncol=2))
res
}
avgNDTP <- function(toInsp,train,stats) { if (missing(train) && missing(stats))
stop('Provide either the training data or the product stats') if (missing(stats)) {
View(evalOutlierRanking)
library(ROCR) CRchart(ROCR.simple$predictions, ROCR.simple$labels , data(ROCR.simple) main='Cumulative Recall Chart') head(ROCR.simple$predictions)
library(ROCR)
data(ROCR.simple) main='Cumulative Recall Chart')
library(ROCR)
data(ROCR.simple)
head(ROCR.simple$predictions)
library(ROCR)
data(ROCR.simple)
head(ROCR.simple$predictions)
CRchart(ROCR.simple$predictions, ROCR.simple$labels , main='Cumulative Recall Chart')
head(ROCR.simple$labels)
CRchart(ROCR.simple$predictions, ROCR.simple$labels , main='Cumulative Recall Chart')
library(ROCR)
CRchart(ROCR.simple$predictions, ROCR.simple$labels , main='Cumulative Recall Chart')
install.packages("autoboost")
install.packages("RWeka")
summary(sales)
100*sum(sales$Insp == "unkn")/nrow(sales)
source("evaluationcode.R")
source("evaluationcode.R")
View(globalStats)
install.packages("RWeka")
install.packages("RWeka")
install.packages("RWeka")
globalStats <-as.matrix(filter(sales,insp!= 'fraud') %>%
group_by(Prod) %>%
summarise(median=median(Uprice),iqr=IQR(Uprice)) %>%
select(median, iqr))
globalStats <-as.matrix(filter(sales,sales$insp!= 'fraud') %>%
group_by(Prod) %>%
summarise(median=median(Uprice),iqr=IQR(Uprice)) %>%
select(median, iqr))
View(sales)
globalStats <-as.matrix(filter(sales, sales$Insp != 'fraud') %>%
group_by(Prod) %>%
summarise(median=median(Uprice),iqr=IQR(Uprice)) %>%
select(median, iqr))
rownames(globalStats) <-levels(sales$Prod)
globalStats[which(globalStats[,'iqr']==0), 'iqr']
View(globalStats)
rownames(globalStats) <-levels(sales$Prod)
globalStats[which(globalStats[,'iqr']==0), 'iqr'] <- globalStats[which(globalStats[,'iqr']==0), 'median'] head(globalStats,3))
rownames(globalStats) <-levels(sales$Prod) globalStats[which(globalStats[,'iqr']==0), 'iqr'] <- globalStats[which(globalStats[,'iqr']==0), 'median'] head(globalStats,3)
#where the interquartile range is 0, the first and third quarter
rownames(globalStats) <-levels(sales$Prod)
globalStats[which(globalStats[,'iqr']==0), 'iqr'] <-
globalStats[which(globalStats[,'iqr']==0), 'median']
head(globalStats,3)
install.packages("RWeka")
install.packages("RWeka")
install.packages("rJava",type='source')
install.packages("RWeka")
BPrule.wf <- function(form,train,test,...) { require(dplyr, quietly=TRUE)
ms <- as.matrix(filter(train,Insp != 'fraud') %>%
group_by(Prod) %>% summarise(median=median(Uprice),iqr=IQR(Uprice)) %>% select(median,iqr))
rownames(ms) <- levels(train$Prod)
ms[which(ms[,'iqr']==0),'iqr'] <- ms[which(ms[,'iqr']==0),'median'] ORscore <- abs(test$Uprice-ms[test$Prod,'median']) /
BPrule.wf <- function(form,train,test,...) { require(dplyr, quietly=TRUE)
ms <- as.matrix(filter(train,Insp != 'fraud') %>% group_by(Prod) %>% summarise(median=median(Uprice),iqr=IQR(Uprice)) %>% select(median,iqr))
rownames(ms) <- levels(train$Prod)
ms[which(ms[,'iqr']==0),'iqr'] <- ms[which(ms[,'iqr']==0),'median'] ORscore <-
BPrule.wf <- function(form,train,test,...) {
require(dplyr, quietly=TRUE)
ms <- as.matrix(filter(train,Insp != 'fraud') %>% group_by(Prod) %>% summarise(median=median(Uprice),iqr=IQR(Uprice)) %>% select(median,iqr))
rownames(ms) <- levels(train$Prod)
ms[which(ms[,'iqr']==0),'iqr'] <- ms[which(ms[,'iqr']==0),'median'] ORscore <-
BPrule.wf <- function(form,train,test,...) {
require(dplyr, quietly=TRUE)
ms <- as.matrix(filter(train,Insp != 'fraud') %>%
group_by(Prod) %>%
summarise(median=median(Uprice),iqr=IQR(Uprice)) %>%
select(median,iqr))
rownames(ms) <- levels(train$Prod)
ms[which(ms[,'iqr']==0),'iqr'] <- ms[which(ms[,'iqr']==0),'median'] ORscore <-
BPrule.wf <- function(form,train,test,...) {
require(dplyr, quietly=TRUE)
ms <- as.matrix(filter(train,Insp != 'fraud') %>%
group_by(Prod) %>%
summarise(median=median(Uprice),iqr=IQR(Uprice)) %>%
select(median,iqr))
rownames(ms) <- levels(train$Prod)
ms[which(ms[,'iqr']==0),'iqr'] <- ms[which(ms[,'iqr']==0),'median'] ORscore <-
ms <- as.matrix(filter(train,Insp != 'fraud') %>%
group_by(Prod) %>%
summarise(median=median(Uprice),iqr=IQR(Uprice)) %>%
select(median,iqr))
BPrule.wf <- function(form,train,test,...) {
require(dplyr, quietly=TRUE)
ms <- as.matrix(filter(train,Insp != 'fraud') %>%
group_by(Prod) %>%
summarise(median=median(Uprice),iqr=IQR(Uprice)) %>%
select(median,iqr))
rownames(ms) <- levels(train$Prod)
ms[which(ms[,'iqr']==0),'iqr'] <- ms[which(ms[,'iqr']==0),'median'] ORscore <-
View(BPrule.wf)
View(BPrule.wf)
View(BPrule.wf)
BPrule.wf <- function(form,train,test,...) {
require(dplyr, quietly=TRUE)
ms <- as.matrix(filter(train,Insp != 'fraud') %>%
group_by(Prod) %>%
summarise(median=median(Uprice),iqr=IQR(Uprice)) %>%
select(median,iqr))
rownames(ms) <- levels(train$Prod)
ms[which(ms[,'iqr']==0),'iqr'] <- ms[which(ms[,'iqr']==0),'median'] ORscore <-
View(BPrule.wf)
View(BPrule.wf)
bp.res <- performanceEstimation (
PreTask(Insp ~ .,sales),
Workflow("BPrule.wf"),
EstimationTask(metrics=c("Precision","Recall","avgNDTP"),
method=Holdout(nReps=3,hldSz=0.3, strat=TRUE),
evaluator="evalOutlierRanking",
evaluator="evaluatorOutlierRanking",
evaluator.pars=list(Threshold=o.1,
statsProds=globalStats))
)
setwd('/Users/shamekabrayton/Dropbox/NYU/02_Module/08_DMR/_InClass/StockCaseStudy')
setwd('/Users/shamekabrayton/Dropbox/NYU/02_Module/08_DMR/_InClass/StockCaseStudy')
library(xts) # extra package to install
setwd('/Users/shamekabrayton/Dropbox/NYU/02_Module/08_DMR/_InClass/StockCaseStudy')
library(xts) # extra package to install
data(GSPC, package="DMwR2")
first(GSPC)
View(GSPC)
