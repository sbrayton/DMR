points(cleanBikeData$temp, cleanBikeData$casual, pch = 16, col = "pink")
points(cleanBikeData$temp, cleanBikeData$registered, pch = 16, col = "skyblue")
legend("topleft",legend = c("casual", "registered"), col = c("red","skyblue"), pch = c(16, 16), bg = "white")
abline(lm(cleanBikeData$registered ~ cleanBikeData$temp), lty = 6, col = "blue")
abline(lm(cleanBikeData$casual ~ cleanBikeData$temp), lty = 6, col = "black")
registered <- paste("cor = ", round(cor(cleanBikeData$registered, cleanBikeData$temp), 2), sep = "")
casual <- paste("cor = ", round(cor(cleanBikeData$casual, cleanBikeData$temp), 2), sep = "")
legend("left",legend = c(casual, registered) )
par(mfrow=c(2,2))
cleanBikeData<-data.frame(bikeshare$windspeed, bikeshare$humidity, bikeshare$season, bikeshare$weekday, bikeshare$weathersit, round(((bikeshare$atemp*50))*9/5+32, digits = 0), round(((bikeshare$temp*41))*9/5+32, digits = 0), bikeshare$dteday, bikeshare$cnt,bikeshare$casual, bikeshare$registered)
names(cleanBikeData)[names(cleanBikeData) == "bikeshare.windspeed"] <- "windspeed"
names(cleanBikeData)[names(cleanBikeData) == "bikeshare.humidity"] <- "humidity"
names(cleanBikeData)[names(cleanBikeData) == "bikeshare.season"] <- "season"
names(cleanBikeData)[names(cleanBikeData) == "bikeshare.weekday"] <- "weekday"
names(cleanBikeData)[names(cleanBikeData) == "bikeshare.weathersit"] <- "weathersit"
names(cleanBikeData)[names(cleanBikeData) == "round...bikeshare.temp...41.....9.5...32..digits...0."] <- "temp"
names(cleanBikeData)[names(cleanBikeData) == "round...bikeshare.atemp...50.....9.5...32..digits...0."] <- "FeelsLike"
names(cleanBikeData)[names(cleanBikeData) == "bikeshare.dteday"] <- "date"
names(cleanBikeData)[names(cleanBikeData) == "bikeshare.cnt"] <- "cnt"
names(cleanBikeData)[names(cleanBikeData) == "bikeshare.casual"] <- "casual"
names(cleanBikeData)[names(cleanBikeData) == "bikeshare.registered"] <- "registered"
DayofWeek<-cleanBikeData$weekday
cor.registered<- cor.test(x = cleanBikeData$season,
y = cleanBikeData$registered)
cor.registered
cor.season<-cor.test(x=cleanBikeData$season, y=cleanBikeData$cnt)
cor.season
cor.seasonCas<-cor.test(x=cleanBikeData$season, y=cleanBikeData$casual)
cor.seasonCas
cor.seasonReg<-cor.test(x=cleanBikeData$season, y=cleanBikeData$registered)
cor.seasonReg
season<-table(cleanBikeData$season)
sp.rentalCnt<-subset(cleanBikeData, season==1)
DayofWeek<-table(cleanBikeData$weekday)
cor.weekday<- cor.test(x = cleanBikeData$weekday,
y = cleanBikeData$cnt)
cor.weekday
cor.casual<- cor.test(x = cleanBikeData$weekday,
y = cleanBikeData$casual)
cor.casual
a1<-c(16, 16, 16, 16, 16)
a2<-c(15, 16, 16, 16, 16)
summary(a1)
sd(a1)
sd(a2)
sd(20, 25, 25, 25, 30)
2a<-c(20, 25, 25, 25, 30)
a2<-c(20, 25, 25, 25, 30)
b2<-c(15, 25, 25, 25, 35)
sd(a2)
sd(b2)
mean(b2)
hist(b2)
hist(a2)
hist(b2)
a4<-c(10, 20, 30, 40, 50, 60, 70)
b4<-c(10, 20, 30, 40, 40, 50, 60, 70)
sd(a4)
sd(b4)
t<-(0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
t<-c(0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
mean(t)
sd(t)
hist(t)
dbinom(4, size=12, prob = 0.2)
dbinom(2, size=20, prob = 0.2)
dbinom(2, size=20, prob = 0.05)
dbinom(2, size=20, prob = 0.1)
dbinom(0, size=20, prob = 0.1)+dbinom(1, size=20, prob = 0.1)+dbinom(2, size=20, prob = 0.1)
dbinom(0, size=20, prob = 0.1)+dbinom(1, size=20, prob = 0.1)
dbinom(1, size=20, prob = 0.1)+dbinom(2, size=20, prob = 0.1)
pbinom(2,size=20,prob = 0.1)
pbinom(2,size=20,prob = 0.1)/2
prob(2/20)
pbinom(2,size=20,prob = 0.5)
t
t<-c(0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0)
dbinom(t)
dbinom(t, size = 2)
pbinom(2,size=20,prob = 0.95)
pbinom(2,size=20,prob = 0.9)
dbinom(0,20,.05)
dbinom(2,20,.05)
dbinom(0,20,.05)
dbinom(1,20,.05)
dbinom(0,20,.05)
dbinom(2,20,.05)
dbinom(1,20,.05)
dbinom(2,20,.1)
1/7
1/6
2/20
2/7
dbinom(2,20,.15)
u=pnorm(2.53, mean = 2.56, .01)
d=pnorm(2.57, mean = 2.56, .01)
u-d
a<-12.2
s<-3
n<-100
error<-qnorm(.975)*s/sqrt(n)
left<-a-error
right<-a+error
left
right
a<-41.93
s<-.1789
n<-20
error<-qnorm(.975)*s/sqrt(n)
left<-a-error
right<-a+error
left
right
-.1+.7*20000
-.1+.7*200000
-.1+(.7*20000)
v<--.1-130000
v/.7
v<--.1-120000
v/.7
v<--.1-140000
v/.7
install.packages("MASS")
data(Boston, package="MASS")
data(Boston, package="MASS")
Boston$age <- cut(Boston$age,4)
View(Boston)
data(Boston, package="MASS")
Boston$age
View(Boston)
data(Boston, package="MASS")
View(Boston)
Boston$age <- cut(Boston$age,4)
table(Boston$age)
data(Boston, package="MASS")
Boston$age <- cut(Boston$age,10)
table(Boston$age)
Boston$age <- cut(Boston$age,4)
data(Boston, package="MASS")
Boston$age2 <- cut(Boston$age,4)
table(Boston$age2)
Boston$age3 <- cut(Boston$age,quantile(Boston$age,probs=seq(0,1,.25)))
table(Boston$age3)
?
quantile
boxplot(Boston$age)
hist(Boston$age)
boxplot(Boston$age)
quantile(Boston$age, probs = c(0.05, 0.95))
quantile(Boston$age,probs=seq(0, 1, .25))
library(e1071)
setwd("~/DropBox/NYU/02_Module/08_DMR/Assignment02")
render("sb6000_assignment02.Rmd")
render("sb6000_assignment02.Rmd")
library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
render("sb6000_assignment02.Rmd")
render("sb6000_assignment02.Rmd")
plot(cars)
install.packages(RMySQL)
install.packages('RMySQL')
setwd("~/DropBox/NYU/02_Module/08_DMR/Assignment02")
library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
render("sb6000_assignment02.Rmd")
setwd("~/DropBox/NYU/02_Module/08_DMR/Assignment02")
library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
render("sb6000_assignment02.Rmd")
setwd("~/DropBox/NYU/02_Module/08_DMR/Assignment02")
library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages('RMySQL')
install.packages('DNwR2')
install.packages("DMwR2")
library(DMwR2)
installed.packages()
setwd("~/DropBox/NYU/02_Module/08_DMR/Assignment02")
library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages('RMySQL')
install.packages('DMwR2')
library(DMwR2)
library(data.table)
mydat <- fread('https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data')
head(mydat)
install.packages("DMwR2")
View(mydat)
setwd("~/DropBox/NYU/02_Module/08_DMR/Assignment02")
library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages('RMySQL')
install.packages('DMwR2')
library(DMwR2)
head(mydat)
names(mydat) <- c("patientID", "clump_thicknes","uniformity_cell_size","uniformity_cell_shape","marginal_adhesion","single_eipthelial","bare_nuclei","bland_chromatin","normal_nucleoli","mitoses","class")
head(mydat)
setwd("~/DropBox/NYU/02_Module/08_DMR/Assignment02")
library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages('RMySQL')
install.packages('DMwR2')
library(DMwR2)
install.packages("DMwR2")
nrow(mydat)
nrow(mydat)
setwd("~/DropBox/NYU/02_Module/08_DMR/Assignment02")
# library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
# install.packages('RMySQL')
# install.packages('DMwR2')
# library(DMwR2)
library(data.table)
mydat <- fread('https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data')
names(mydat) <- c("patientID", "clump_thicknes","uniformity_cell_size","uniformity_cell_shape","marginal_adhesion","single_eipthelial","bare_nuclei","bland_chromatin","normal_nucleoli","mitoses","class")
library(tidyr)
gather
mydatL<-gather(mydat, "patientID", "clump_thicknes","uniformity_cell_size","uniformity_cell_shape","marginal_adhesion","single_eipthelial","bare_nuclei","bland_chromatin","normal_nucleoli","mitoses","class")
d <- readLines(url("https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data")
d <- readLines(url("https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data")
library("stringi")
d <- readLines(url("https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/heart-disease.names")
d <- readLines(url("https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/heart-disease.names"))
d <- readLines(url("https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/heart-disease.names"))
d
d <- d[127:235]
head(d,2)
tail(d,2)
stri_trim(d)
t<- readLines(url("https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.names"))
t
t<- t[106:116]
t
stri_trim(t)
t
d[grep("^26",d)]
d
d[grep("^26",d)]
d[grep("^26",d)]
d[grep("^1",d)]
d[grep("26",d)]
d[grep("1",d)]
d[grep("1",d)]
d <- d[127:235]
d[grep("31",d)]
d[grep("26",d)]
d
d <- d[127:235]
d[grep("26",d)]
d
d <- readLines(url("https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/heart-disease.names"))
d <- d[127:235]
head(d,2)
tail(d,2)
stri_trim(d)
d[grep("1",d)]
d[grep("31",d)]
d[grep("^1",d)]
d[grep("11",d)]
d[grep("[1]",d)]
d[grep("[1] ",d)]
d[grep(" [1] ",d)]
d[grep("   [1] ",d)]
tgtLines <- sapply(1:76,function(i) d[grep(paste0("^",i),d)[1]]) head(tgtLines,2)
tgtLines <- sapply(1:76,function(i) d[grep(paste0("^",i),d)[1]]) head(tgtLines,2)
tgtLines <- sapply(1:76,function(i) d[grep(paste0("^",i),d)[1]]) head(tgtLines,2))
tgtLines <- sapply(1:76,function(i) d[grep(paste0("^",i),d)[1]])
head(tgtLines,2)
d <- d[127:235]
head(d,2)
tail(d,2)
d <- readLines(url("https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/heart-disease.names"))
d <- d[127:235]
head(d,2)
tail(d,2)
stri_trim(d)
tgtLines <- sapply(1:76,function(i) d[grep(paste0("^",i),d)[1]])
head(tgtLines,2)
d
tgtLines <- sapply(1:76,function(i) d[grep(paste0("",i),d)[1]])
head(tgtLines,2)
d[grep("   [1] ",d)]
d[grep("[1] ",d)]
d[grep("^[1] ",d)]
d[grep("[^1] ",d)]
d[grep("[^1] ",d)]
d[grep("^[1] ",d)]
d[grep("[1] ",d)]
d[grep("?[1] ",d)]
d[grep("-[1] ",d)]
d[grep("[^1] ",d)]
d[grep("[^...1] ",d)]
d[grep("^1",d)]
d[grep("^    1",d)]
d[grep("^...1",d)]
d[grep(" ",d)]
d[grep("26",d)]
t
x<-t[grep(".",t)]
x
x<-t[grep(".",t[1])]
x
x
x<-t[grep("[ ].",t[1])]
x<-t[grep(".[ ]",t[1])]
t[grep("[ ]",t[1])]
x<-strsplit(x, " ")[[1]]
x
x[5]
x<-strsplit(x, " ")[[2]]
x<-strsplit(t, " ")[[2]]
x[5]
tgtLines <- sapply(1:76,function(i) d[grep(paste0("^",i),d)[1]])
sapply
tgtLines <- sapply(1:76,function(i) print(i))
tgtLines <- sapply(1:76,function(i) print(i))
d[grep(paste0("^",d[1]),d)[1]]
d[grep(paste0("^",d[i]),d)[1]]
d[grep(paste0("^",i),d)[1]]
i<-10
d[grep(paste0("^",d[i]),d)[1]]
i<-2
d[grep(paste0("^",d[i]),d)[1]]
i<-3
d[grep(paste0("^",d[i]),d)[1]]
d
i<-3
d[grep(paste0("^",i),d)[1]]
i<-3
d[grep(paste0("^",d[i]),d)[1]]
i<-3
d[3]
d[grep(paste0("^",d[i]),d)[1]]
i<-3
d[i]
d[grep(paste0("^",d[i]),d)[1]]
i<-10
d[i]
d[grep(paste0("^",d[i]),d)[1]]
sapply(1:76,function(i) d[grep(paste0("^",i),d)[1]])
sapply(1:76,function(i) d[grep(paste0("^",d[i]),d)[1]])
tgtLines <- sapply(1:76,function(i) print(i))
tgtLines <- sapply(1:76,function(i) print(d[i]))
tgtLines <- sapply(1:76,function(i) print(d[i:5]))
t[grep("[ ]",t[1])]
sapply(1:76,function(i) d[grep(paste0("^",i),d)[1]])
sapply(1:76,function(i) d[grep(paste0("^",i),d)[i]])
sapply(1:76,function(i) d[grep(paste0("^",i),d) [i]] )
stri_trim(t)
x[5]
t<-stri_trim(t)
t
t[1]
x<-strsplit(t[1], " ")
x
x[1]
x[2]
x<-strsplit(t, " ")
x
x<-strsplit(t, " ")
x[1:2]
x<-strsplit(t[1], " ")
x[1:2]
x[:2]
x[0:2]
x[[1:2]]
install.packages("corrplot")
mydat
class
sapply(mydat, class)
r<-sapply(mydat, class)
r
summary(r)
r<- as.data.frame(sapply(mydat, class))
summary(r)
kable(r)
r<- as.data.frame(sapply(mydat, class))
summary(r)
kable(r)
setwd("~/DropBox/NYU/02_Module/08_DMR/Assignment02")
# library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
# install.packages('RMySQL')
# install.packages('DMwR2')
library(DMwR2)
library(plyr)
library(ggplot2)
library(reshape2)
library(corrplot)
library(caret)
library(psych)
library(tidyverse)
#Here we will use knitr to produce a html friendly table to display the top 3 rows of na data examples.
library(knitr)
library(data.table)
# install.packages("corrplot")
library("corrplot")
setwd("~/DropBox/NYU/02_Module/08_DMR/Assignment02")
#Pul the data straight from the online site
mydat <- fread('https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data')
#Alter column names of dataframe to match the data dictionary that was found online
names(mydat) <- c("patientID", "clump_thicknes","uniformity_cell_size","uniformity_cell_shape","marginal_adhesion","single_eipthelial","bare_nuclei","bland_chromatin","normal_nucleoli","mitoses","class")
# {r echo=FALSE, fig.align='center'}
library("stringr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
con <- url("https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.names")
colTitles<- readLines(con)
close(con)
colTitles<- colTitles[106:116]
splTitles<-gsub('1 - 10+', '', colTitles)
headers<-c()
for(title in splTitles)
{
splString <- as.data.frame(strsplit(title,  "\t"), row.names = NULL, optional = FALSE)
splString <- as.character( splString[!(splString==""),])
splString<-str_trim(splString)
splString<- lapply(splString, function(x){gsub(" ", "_",splString)})
splString<- lapply(splString, function(x){gsub("___________", "",splString)})
splString<- lapply(splString, function(x){gsub("__________", "",splString)})
splString<- lapply(splString, function(x){gsub("_________", "",splString)})
splString<- lapply(splString, function(x){gsub("________", "",splString)})
splString<- lapply(splString, function(x){gsub("_______", "",splString)})
splString<- lapply(splString, function(x){gsub("______", "",splString)})
splString<- lapply(splString, function(x){gsub("_____", "",splString)})
splString<- lapply(splString, function(x){gsub("___", "",splString)})
splString<- lapply(splString, function(x){gsub("__", "",splString)})
splString<- lapply(splString, function(x){gsub("_", " ",splString)})
headers<-append(headers, splString[[1]])
}
Data_Features<-as.data.frame(headers)
names(Data_Features)<-c("Data Featrues")
kable(Data_Features, caption = NULL,format = "html")
r<- as.data.frame(sapply(mydat, class))
summary(r)
kable(r)
rw <- describe(mydat, IQR=TRUE)
rw
# multi.hist(mydat, bcol = "pink")
library(readr)
# Replace an ? marks found in the data with 'NA' so to later use R functions/packages to clean them up.
na.mydat <- parse_integer(mydat$bare_nuclei,na="?")
#Once question marks are transformed to 'NA', add the vector back to the data frame
mydat$bare_nuclei<-na.mydat
noNA.mydat <- centralImputation(mydat)
kable( head(mydat[!complete.cases(mydat),],3), caption = 'Top 3 Rows with Missing Data')
#Filter cleansed data table with the same rows.
t<-head(mydat[!complete.cases(mydat),],3)
pIDvector <-t$patientID
kable( noNA.mydat[noNA.mydat$patientID %in% pIDvector, ], caption = 'Same 3 rows, with NA\'s cleansed')
l <- cor(noNA.mydat[,3:11])
corrplot(l, method = "circle")
# Looking at only malignant datapoints
mydat4<-subset(noNA.mydat, noNA.mydat$class == 4)
# Looking at only benign datapoints
mydat2<-subset(noNA.mydat, noNA.mydat$class == 2)
# Means of malignant columns
mydat4_mean<-colMeans(subset(mydat4, select = c(marginal_adhesion, clump_thicknes, uniformity_cell_size, uniformity_cell_shape, single_eipthelial, bare_nuclei, bland_chromatin, normal_nucleoli, mitoses)))
# Means of benign columns
mydat2_mean<-colMeans(subset(mydat2, select = c(marginal_adhesion, clump_thicknes, uniformity_cell_size, uniformity_cell_shape, single_eipthelial, bare_nuclei, bland_chromatin, normal_nucleoli, mitoses)))
# Plot means of malignant columns vs means of benign columns
# Merge benign and malignant mean tables
total<- merge(mydat4_mean, mydat2_mean, by="row.names")
names(total) <- c("Attributes","Malignant", "Benign")
# Use Melt to transform
df1 <- melt(total,"Attributes")
#df1$Attributes to factor variabls
df1$Attributes<-as.factor(df1$Attributes)
# GGplot
plot <- ggplot(df1, aes(x = Attributes, y=value)) + ggtitle("Benign vs Malignant")+ geom_bar(aes(fill=variable),stat="identity", position ="dodge") +  theme(axis.text.x = element_text(angle=-40, hjust=.1)) +scale_fill_manual(name="Cancer Class",values = c("darkblue","pink"))
plot
B<-table(mydat$class)
names(B) <- c("Benign","Malignant")
barplot(as.matrix(B), main='Benign vs. Malignant Cases', ylab = 'Count of Cases', beside = TRUE,col = c("Pink","darkblue"), legend = rownames(B), ylim = c(0, round_any(nrow(mydat)+50,10)))
# Logistic Regression on all variables on class to view significance of each variable
model_all <- glm(as.factor(noNA.mydat$class) ~ marginal_adhesion + clump_thicknes
+ uniformity_cell_size+uniformity_cell_shape+single_eipthelial+bare_nuclei+bland_chromatin+normal_nucleoli+mitoses
, data=noNA.mydat, family = binomial )
summary(model_all)
#Drill down based on significance
model_sig<-glm(as.factor(noNA.mydat$class) ~ marginal_adhesion+clump_thicknes+uniformity_cell_size+uniformity_cell_shape+bare_nuclei+bland_chromatin+normal_nucleoli, data=noNA.mydat, family = binomial )
# summary(model_sig)
# Logistic Regression of Marginal Adhesion on Class
model_ma<-glm(as.factor(class)~marginal_adhesion, data=noNA.mydat,family = binomial )
xmarginal_adhesion <- seq(0, 10, 0.01)
ymarginal_adhesion <-  predict(model_ma, list(marginal_adhesion = xmarginal_adhesion),type="response")
plot(noNA.mydat$marginal_adhesion, noNA.mydat$class, pch = 10, xlab = "Marginal Adhesion", ylab = "Class", main="Marginal Adhesion Based on Class")
lines(xmarginal_adhesion, ymarginal_adhesion)
noNA.mydat$class[noNA.mydat$class == 2] <- "Benign"
noNA.mydat$class[noNA.mydat$class == '4'] <- "Malignant"
#df1$Attributes to factor variabls
noNA.mydat$class<-as.factor(noNA.mydat$class)
#
# library(ggplot2)
plot <- ggplot(data=noNA.mydat, aes(x=noNA.mydat$clump_thicknes, y=noNA.mydat$marginal_adhesion, col=noNA.mydat$class)) + ggtitle("Marginal adhesions vs Clump Thickness")+  theme(plot.title = element_text(family = "Trebuchet MS", color="darkblue", face="bold", size=18, hjust=0, posi))
plot <- plot + geom_point(aes(shape=noNA.mydat$class,size=.1,alpha= .1)) + scale_color_manual(name="Cancer Class",values=c("darkblue", "red"))+ scale_alpha(guide = 'none')
plot <- plot + xlab("Clump Thickness") + ylab("Marginal Adhesion")
plot
library(ggplot2)
plot <- ggplot(data=noNA.mydat, aes(x=noNA.mydat$clump_thicknes, y=noNA.mydat$mitoses, col=noNA.mydat$class)) + ggtitle("Marginal adhesions vs Mitosi") + theme(plot.title = element_text(family = "Trebuchet MS", color="darkblue", face="bold", size=18, hjust=0))+scale_fill_gradient(low="green",high="darkred")
plot <- plot + geom_point(aes(shape=noNA.mydat$class,size=.1,alpha= .8)) + scale_color_manual(name="Cancer Class",values=c("darkblue", "red"))+ scale_alpha(guide = 'none')
plot <- plot + xlab("Clump Thickness") + ylab("Mitosis")
plot
r
View(r)
kable(r, col.names=c("Attribute","Data Type"))
names(r)
names(r)<-c("Attribute","Data Type")
names(r)<-c("Data Type")
summary(r)
kable(r)
#Drill down based on significance
model_sig<-glm(as.factor(noNA.mydat$class) ~ marginal_adhesion+clump_thicknes+uniformity_cell_size+uniformity_cell_shape+bare_nuclei+bland_chromatin+normal_nucleoli, data=noNA.mydat, family = binomial )
summary(model_sig)
multi.hist(mydat, bcol = "pink")
multi.hist(noNA.mydat, bcol = "pink")
r<- as.data.frame(sapply(noNA.mydat, class))
names(r)<-c("Data Type")
summary(r)
kable(r)
r<- as.data.frame(sapply(noNA.mydat, class))
names(r)<-c("Data Type")
kable(r)
